/// <reference types="cypress" />
declare const SVG_NS = "http://www.w3.org/2000/svg";
declare const COLORS: string[];
declare class InputDeviceCapabilities {
    firesTouchEvents: boolean;
    constructor({ firesTouchEvents: boolean }: {
        firesTouchEvents: any;
    });
}
declare namespace Cypress {
    interface Chainable<Subject> {
        visitMobile(url: string, options?: Partial<VisitOptions>): Chainable<Window>;
        visitMobile(options: Partial<VisitOptions> & {
            url: string;
        }): Chainable<Window>;
        swipe(...path: SwipeConfAndPath): any;
    }
}
declare type NumPos = [number, number];
declare type FingerPositionName = 'left' | 'right' | 'top' | 'bottom' | 'center' | 'top-left' | 'topLeft' | 'top-right' | 'topRight' | 'bottom-left' | 'bottomLeft' | 'bottom-right' | 'bottomRight';
declare type FingerPosition = NumPos | FingerPositionName;
declare type Fingers = FingerPosition | FingerPosition[];
declare type SwipeConfig = {
    steps?: number;
    delay: number;
    draw: boolean;
};
declare type SwipeConfAndPath = [SwipeConfig, ...FingerPosition[]] | FingerPosition[];
declare type TouchEventConfig = {
    fingers: NumPos[];
    checkpoint?: boolean;
};
declare class SVGCanvas {
    doc: HTMLDocument;
    svg: SVGElement;
    lines: SVGPathElement[];
    constructor(doc: HTMLDocument);
    startLine(finger: number, x: number, y: number): void;
    extendLine(finger: number, x: number, y: number): void;
    mkDot(className: string, x: number, y: number, radius: number, color: string, stroke?: number): SVGCircleElement;
    touchstart(finger: number, x: number, y: number): void;
    touchmove(finger: number, x: number, y: number, checkpoint: any): void;
    touchend(finger: number, x: number, y: number): void;
}
declare function getOffset(element: HTMLElement, offset?: {
    top: number;
    left: number;
}): any;
declare function normalizeCheckpointFingers(target: JQuery<HTMLElement>, fingers: Fingers): NumPos[];
declare function notationToPoint(target: JQuery<HTMLElement>, position: FingerPosition): NumPos;
declare class Swipe {
    target: JQuery<HTMLElement>;
    touchCanvas: SVGCanvas;
    delay: number;
    stepDelay: number;
    steps: number;
    win: Window;
    path: FingerPosition[];
    promiseChain: Promise<void>;
    constructor(target: JQuery<HTMLElement>, { steps, delay, draw }: SwipeConfig, path: FingerPosition[]);
    doIt(): void;
    updateFingerMove(from: any, to: any, checkpoint: any): void;
    dispatchTouchEvent(evName: string, { fingers, checkpoint }: TouchEventConfig): void;
}
